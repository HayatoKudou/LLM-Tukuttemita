import torch

"""
自己注意(Self-Attention)の最も基本的なアイデアを最小例で確認するスクリプト。

ここでは、入力ベクトル群をそのままクエリ/キー(=各 x^i)として扱い、
ある1トークン(ここでは2番目)をクエリに選び、各トークンとの内積を
計算して「類似度=未正規化の注意スコア」を得る。

- 本質: 内積が大きいほど、そのトークンはクエリと「似ている」= 注意を向けるべき
- 省略: 一般的な実装にあるスケーリング(1/sqrt(d))や softmax による正規化、
        さらには重み付き和によるコンテキストベクトル計算は本例では省略
"""

# 入力: 各行が1トークンの埋め込みベクトル(ここでは次元=3 の玩具データ)
#       簡略化のため、Q=K=V=inputs とみなす自己注意の状況を想定
inputs = torch.tensor(
  [[0.43, 0.15, 0.89], # Your     (x^1)
   [0.55, 0.87, 0.66], # journey  (x^2)
   [0.57, 0.85, 0.64], # starts   (x^3)
   [0.22, 0.58, 0.33], # with     (x^4)
   [0.77, 0.25, 0.10], # one      (x^5)
   [0.05, 0.80, 0.55]] # step     (x^6)
)

# クエリ: 2番目のトークン(0始まりなので index=1)をクエリとして選択
#         ここでは "journey" に対応
query = inputs[1]

# 注意スコア(未正規化)を格納する 1 次元テンソルを用意
# サイズはトークン数(=各 x^i の個数)に等しい
attn_scores_2 = torch.empty(inputs.shape[0])
for i, x_i in enumerate(inputs):
    # 内積: x^i・query → 類似度(注意スコア)として解釈
    attn_scores_2[i] = torch.dot(x_i, query)

# 未正規化スコアを出力
# 参考: 一般的には softmax(attn_scores_2 / sqrt(d)) で正規化して重み(注意分布)を得る
print(attn_scores_2)